controller
 1 read state of resources,
 2 update resources
 3 write state to etcd 
 4 reloop
 



Kubernetes API  
1 serve the kuberntes 
   reading state: getting single objects,listing them, streaming changes 

2 manipulating state :creating updating,deleting objects 




Kind 
  objects represent a persistent entity
  Lists
  Special-purpose kinds 

API  group
  a collection of kinds that are logically related.

Version
  v1alpha1 --> v1beta1 --> v1 


GroupVersionResource  GVR 

/apis/batch/v1/namespaces/$namespace/jobs
     group  version                  resource 

/api/v1/namespaces/
/api/v1/nodes 

GroupVersionKind  GVK 
	 
	 
API resources 
kubectl api-resources 
kubect api-versions 
	 



kubernetes API Processing overview 

api http handler --> authn & authz --> mutating admission --> object schema validation -->validating admission --> persisting to etcd 
                                        mutating webhooks                                  validating webhooks 
										
1  DefaultBuildHandlerChain()    k8s.io/apiserver/pkg/server/config.go 
2 handler    k8s.io/apiserver/pkg/handler.go
3 a handler is registered for each api group 


after generic handler chain is passed, the actual request processing starts
										



										
										
Basic of client-go 
runtime.Object --> schema.ObjectKind --> metav1.TypeMeta -- Resource

k8s.io/apimachinery/pkg/runtime 
 type Object interface {
  GetObjectKind() schema.ObjectKind 
  DeepCopyObject() object
} 

k8s.io/apimachiner/pkg/runtime/schema 
 type ObjectKind interface{
   SetGroupVersionKind(kind GroupVersionKind)
   GroupVersionKind() GroupVersionKind    
}

k8s.io/apimachinery/meta/v1 
 type TypeMeta struct {
   Kind string  `json:"kind,omitempty" protobuf:"bytes,1,opt,name=kind"`
   APIVersion string `json: "apiVersion,omitempty"`
}

										
type Pod struct {
  metav1.TypeMeta `json:",inline"`
  metav1.ObjectMeta `json:"metadata,omitempty"`
  Spec PodSpec `json:"spec,omitempty"`
  Status PodStatus `json:"status,omitempty"`
}














































































































































































































































































































































































	 
	 
	 
